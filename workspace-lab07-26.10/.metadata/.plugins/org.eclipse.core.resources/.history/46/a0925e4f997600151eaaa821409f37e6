package com.naturalprogrammer.spring.sample.config;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.annotation.web.servlet.configuration.EnableWebMvcSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

@Configuration
@EnableWebMvcSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter{
	
	@Resource
	private UserDetailsService userService;
	
	@Bean
	public PasswordEncoder passwordEncoder(){
		
		logger.info("Creating password encoder");
		
		return new BCryptPasswordEncoder();
	}
	
	public void configure(HttpSecurity http) throws Exception
	{
		http.
		authorizeRequests().
		antMatchers("/","/home","/error","/signup","/forgot-password","/reset-password","/public/**").
		permitAll().
		anyRequest().
		authenticated();
		
		http.formLogin().loginPage("/login").permitAll().and()
		.logout().permitAll();
		
	}
	
	@Autowired
	@Override
	protected void configure(AuthenticationManagerBuilder authenticationManagerBuilder)throws Exception{
		
		authenticationManagerBuilder.userDetailsService(userService);
		
	}
	


}
