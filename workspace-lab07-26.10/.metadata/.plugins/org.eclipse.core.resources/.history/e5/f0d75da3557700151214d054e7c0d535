package com.naturalprogrammer.spring.sample.services;


import org.apache.commons.lang3.RandomStringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.annotation.Propagation;


import com.naturalprogrammer.spring.sample.dto.SignupForm;
import com.naturalprogrammer.spring.sample.dto.UserDetailsImpl;
import com.naturalprogrammer.spring.sample.entities.User;
import com.naturalprogrammer.spring.sample.entities.User.Role;
import com.naturalprogrammer.spring.sample.mail.MailSender;
import com.naturalprogrammer.spring.sample.repositories.UserRepository;
import com.naturalprogrammer.spring.sample.util.MyUtil;

@Service
@Transactional(propagation=Propagation.SUPPORTS,readOnly=true)
public class UserServiceImpl implements UserService,UserDetailsService {
	
	private UserRepository userRepository;
	private PasswordEncoder passwordEncoder;
	private MailSender mailSender;
	@Autowired
	public UserServiceImpl(UserRepository userRepository, PasswordEncoder passwordEncoder,MailSender mailSender){
		
		this.userRepository = userRepository;
		this.passwordEncoder = passwordEncoder;
		this.mailSender = mailSender;
	}
	
	
	@Override
	@Transactional(propagation=Propagation.REQUIRED,readOnly=false)
	public void signup(SignupForm signupForm){
		
		User user = new User();
		
		user.setEmail(signupForm.getEmail());
		user.setName(signupForm.getName());
		user.getRoles().add(Role.UNVERIFIED);
		user.setVerificationCode(RandomStringUtils.randomAlphanumeric(16));
		user.setPassword(passwordEncoder.encode(signupForm.getPassword()));
		
		userRepository.save(user);
		
		String verifyLink = MyUtil.hostUrl()+"/users/"+user.getVerificationCode()+"/verify";
		mailSender.send(user.getEmail(),MyUtil.getMessage("verifySubject"),MyUtil.getMessage("verifyEmail",verifyLink));
		logger.info("Verification email to"+user.getEmail()+"queued.");
	}


	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
     
            User user = userRepository.findByEmail(username);
            
            if(user == null){
            	throw new UsernameNotFoundException(username);
            }
            
            return new UserDetailsImpl(user);
	}

}
